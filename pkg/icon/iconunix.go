// Code generated by go-bindata. DO NOT EDIT.
// sources:
// icon/icon.png
//go:build linux || darwin
// +build linux darwin

package icon

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _iconPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x96\xfb\x3b\xd4\x89\xdf\xc6\xdf\x9f\x99\x0f\x73\xd0\x30\x26\xc6\x69\x64\xc6\x21\x83\x1a\x52\xeb\xf8\xec\xcc\x34\x4e\x83\x62\x72\x58\x94\xa7\x1d\xbb\x0e\xdb\xaa\x90\x11\x45\xf9\x90\x8a\x4e\xcb\xe6\x8a\x54\x8c\xd4\x52\xa4\xd9\xa7\x03\xa1\xcc\x14\xdb\xa6\xdd\x25\x46\xc9\x61\x8d\xa2\x6c\x5a\xc7\xcd\x29\xcc\x73\xd9\x5f\xbf\xdf\x1f\xee\xfb\xbe\xae\xfb\xf5\x0f\xbc\xf2\x44\x01\x3e\x14\xb2\x31\x19\x00\x28\xbe\x42\xcf\x20\x00\x04\x56\x43\x04\x00\x38\x64\x34\xd7\x00\x00\xa4\x44\x61\x44\x32\x00\x72\x7e\x35\xc8\x99\x80\xb6\xb5\x00\x60\x24\xf1\x0a\x97\x04\x27\xc4\x4a\x52\xa3\x0e\xc4\x40\x6a\x6a\x2a\x67\xcf\xfe\xf8\xe4\x6f\xa3\x12\x63\x38\x09\x07\xe2\x2e\x8d\xff\x8f\x31\x00\x51\xe9\xeb\xb9\x35\x24\xad\xf7\xef\x81\xe5\x30\xbd\x50\x43\x42\xe2\xca\xdd\x86\x3b\xb2\xd3\x5a\x63\xfe\x1f\x4a\xc8\x05\x69\xa2\xc2\x0e\xf3\xd6\xa2\x6d\xe7\xb0\xe3\x6c\xaf\xab\xa6\xa2\x3e\x9c\xef\xb3\x2d\x24\x5a\x0f\xfe\x42\x6c\xb9\xb2\xc4\x7a\xdb\x50\x3e\x5d\xa0\xd2\x3a\x95\x4d\xac\xe7\x9c\x77\xf9\xec\xa8\x43\x4a\x4e\x6d\x6c\x9c\x1b\x3f\xf2\x6e\xa5\x6d\x3c\xa2\xb4\xbd\xa9\xff\xe2\x44\x7f\xba\x75\x16\x33\x81\xb4\x1e\x23\x89\x71\xc5\xf0\x1f\x43\xb5\xdf\x98\xb4\xe0\x9e\x7e\xb3\x7d\x69\xf2\xce\xfb\x9d\xed\x72\xf9\xad\xf1\x80\xf6\x1f\x7e\xef\x1e\x99\x88\xb1\xff\x99\x09\xe1\x0f\xc6\x8a\xe3\x26\x2f\x2e\x76\x1e\xe4\x44\x1c\x80\xb8\x88\xb1\x7c\xb7\xf8\x4b\x6e\x37\x85\x47\x88\xd1\x21\x73\x55\xc9\xf7\x2a\x1b\x63\xb8\x04\x17\xdb\x06\xe5\x83\xbe\xc9\x5d\xb4\x32\xf4\xce\x1f\xdb\x0c\x0b\x6f\xff\x19\xc9\x49\xb0\xcf\xef\xe3\xc6\x84\x3c\xea\x2d\xb0\xdd\xe7\x5c\xff\x4b\x85\x71\xdd\x5a\xba\xb9\x8d\xbc\xf3\xab\xb7\xb7\x6e\x1f\x7e\x1e\xfd\x90\x1a\xd4\xf6\x0b\xdb\x49\x2d\x2c\xad\x09\xcb\x4e\x38\x38\xe6\x3c\x23\x4f\xd8\xfe\x94\x7b\xdb\xd6\xbe\x5a\x62\x1a\xff\xe0\xc0\x53\x83\x25\x8f\xaf\x1b\xae\x15\x3d\x6e\xab\x3c\x9f\x65\x4c\x28\x79\xee\x18\xc7\x18\xf1\x7d\x3d\xf2\xfb\x91\xae\xcc\x99\xdf\x8a\xfe\xd9\x2d\x56\x58\x65\x7e\x4a\x6d\xde\xe9\x3e\x16\x33\xb5\x72\xae\xcb\xf7\xc7\x3f\xd7\xc4\x0c\xbe\x6c\x53\x37\xf6\xd0\xba\x07\x75\xf5\xa5\xfc\xc6\x69\xa3\xde\xeb\x9e\x0b\x27\x51\x8d\x2a\xa5\x5b\xf3\xcb\x85\x1d\x6a\x2b\x16\x52\xf8\xb6\xf7\x50\x33\xba\x87\x79\x55\xd9\x5c\xa5\xf6\xe5\x76\x7a\x0a\x17\x66\xbd\x96\xcf\x3f\x40\x6d\xb0\xfb\xea\xea\xeb\xa8\x0d\xe6\x5f\xdd\x7c\x8e\xa9\xc1\x56\xfe\xa1\x3e\xe2\x74\x0d\x4c\x1e\xee\x6c\x9a\x73\x52\x90\x54\x8c\x97\xda\xe0\xac\x20\xe5\x2b\x6f\x74\x4f\xf8\xfb\x90\x13\x3b\x33\xd5\x5d\xde\x89\xb8\xbd\xd3\x95\xbc\xe0\x8b\x2e\x08\x1d\x5d\x77\x38\x72\xbd\x0b\xd2\x9f\xb5\xf4\xad\x73\x00\xd6\xc4\x5f\x72\xbd\x70\x86\xc6\x3c\xe4\x20\xc3\x6f\xa1\x16\x42\xad\xb8\xed\xe2\x49\x9a\xf8\xaf\x34\xe9\xca\x53\x5f\x36\x52\x92\xed\xce\x37\x51\x10\x65\xbf\x99\xa0\x6c\x4f\x52\x07\xb5\x46\xfd\x3a\xe3\x0c\xf8\x67\xb7\xf3\x95\x9c\x6c\x5d\x55\xf4\xa8\x6e\xb8\xa9\x37\xf6\x4a\xf2\xd6\xec\x7e\x14\x5a\xf5\xe2\xac\xe4\x00\x13\x95\xf5\x53\x90\x7f\xa8\x39\xb0\x2b\x25\x50\x31\xb6\x09\x77\xb9\x0b\x29\x34\x47\xc3\x27\x43\x08\xf9\xc7\xa9\x2a\xe9\x51\x86\x90\x26\xc0\x2e\xb9\x61\xfb\xb3\x75\x98\xdb\x79\xaa\x1b\xba\x2c\x6c\x85\x28\xb2\x1b\x46\xd8\xe5\x03\xc5\x62\xe6\xf0\xfa\x3d\xe0\xd7\x6f\xf0\x17\xf7\xbb\x57\x73\xc8\xcd\x60\x3a\x76\xd5\x89\x60\xc5\xcf\x7a\xb4\xb2\xc9\x8b\x86\x5d\xbd\xaf\xd4\xf3\xc3\xd6\x7f\x29\x4f\x31\x27\xc8\x67\x16\xff\x2e\x04\x72\x31\xae\xd3\x9c\x20\x97\x2c\xdf\x05\x3b\x85\x6c\xd0\x22\x08\x9a\xaa\xca\xe8\x52\x43\xd0\x7b\x0e\xd2\xee\x40\xad\x44\x32\x0c\x0b\x41\x75\xbb\x8c\xae\x72\x83\x70\x86\x1a\xb2\x16\x6d\x90\x1a\x95\xad\x58\x90\x97\x8e\x89\x97\x0b\xc1\x55\x4c\x18\xfd\xe2\x83\xe3\x6e\x5d\x53\x69\xcb\x95\x6f\x74\xa0\xdf\xcd\xf3\x45\x2f\x82\xbd\x08\x3b\x57\x63\xc0\xe0\x87\x35\x0f\x3c\xba\xf2\xd3\x32\x19\x38\xc6\x19\x0d\xb3\xbd\x7e\xe5\x88\xe0\x33\x2f\xa5\x91\x0c\x91\x9a\x65\x9c\x86\x4d\x0d\x41\x62\x8c\xf8\xa1\x8e\x07\x60\x75\x02\x6c\xe3\xb3\xd0\x47\x9f\xec\x4f\xcc\x34\x4f\x9f\x41\xc2\xb5\x2c\x13\x6f\x0d\x96\x6a\x21\x9d\x36\x60\xa8\x65\xe9\x39\xb2\xe4\x33\xe0\xa7\x42\x7f\x0d\x31\x86\xfb\xb8\xdf\xc0\x98\x97\x27\x3d\x9a\x4e\x01\xc3\xbb\xc1\x88\x83\xbe\x58\x53\xaa\x34\xcb\x05\x29\x05\x96\x02\x48\xf2\x20\x6c\xc0\x95\x69\x9e\xc5\x03\xbe\xdd\x46\xf0\x40\x4e\x3c\xe4\x5b\xe2\xe6\x40\x5e\xa4\x84\x8f\x68\xf8\x6e\x42\x8e\xbd\x0a\x3b\x5d\x5e\xd8\x85\xaf\xb2\xb0\x43\x9b\x68\x6b\x76\x89\xf5\x3f\x6a\xd4\x99\xe0\xd6\x54\xd7\x68\xf4\xfc\xa9\xc5\x3e\x5b\x7e\xb6\xd8\xd1\x6d\x4b\x7c\xfa\xa4\x28\xbe\x62\xf3\x3b\x05\x6f\xcb\xf7\xdc\x81\xca\xd7\x0c\x8d\x33\x13\x9a\x29\x9f\xf9\x7e\x75\xc6\x23\xbf\x78\x62\x29\xeb\xa8\xb4\x5c\x2e\xac\x45\xde\xe5\x89\x44\x4c\x4d\xd8\x80\xf6\xc4\x65\x23\x59\xe1\xe0\x40\xcd\x15\xd8\x7e\x34\xc8\x25\x61\x8b\xec\xa9\xd0\xa9\x52\xad\xef\x70\x9b\x90\xc9\x7d\x01\xb4\x04\x9d\x49\xad\x16\x9c\x4a\xfd\xca\xec\x7a\xdc\xb1\x2e\xdc\x26\x10\x8b\x32\xef\x96\x6a\xf3\x0c\x72\xb9\x70\x7a\xb1\xc2\x89\xcb\xbf\xc1\xeb\x31\xd5\xf9\xe4\x93\x90\x93\xdb\xd9\xd1\x9d\xa0\x5c\xf7\xe4\x13\x7c\x3e\xdb\x97\xf3\xe8\xa8\x9d\xae\x11\x96\xff\xca\xd4\xfb\x16\x9e\x43\x8c\x9b\x3f\x74\xf2\x8b\x7f\x0c\x15\x75\x79\xbf\xe7\x0a\x6a\x2b\x5a\x56\x50\xa8\x3c\xdb\x4c\xc5\x89\xef\xa8\x67\x34\x0d\x11\x08\x8d\x02\x87\xea\x32\x3b\xcc\xb4\x54\x79\x6a\x14\xe9\xe9\x6e\xd7\x17\x7b\x33\x7e\xf4\xa7\xc8\x65\x47\x6b\x61\x17\x13\x3b\x4f\xc7\x62\x96\x23\x91\x36\xfe\x72\x3b\xcd\x06\x29\x7e\xd9\xae\xaf\x62\x43\xfd\xf6\x51\xe8\x79\xd9\xae\x2f\xa7\x94\x9d\xea\x40\x1c\x6a\xcb\xec\xe4\xfa\xf3\x21\x39\x64\x2c\x65\x39\x12\xd1\x44\xf8\x1b\x29\x7c\xc2\xd8\xe2\x21\x1c\x7b\x37\x4c\xea\x52\xb0\x2e\xbf\x61\x24\x9c\x9c\xae\xb8\xa5\xf7\xb5\x6f\x34\xaf\x22\xd7\x02\x18\xac\xca\xd8\xe9\x05\x7b\x17\xdc\xc7\x6c\xb0\x19\x05\xdb\x28\xf9\xf6\x0e\x44\x1e\xd5\xe9\x3c\x89\x44\x02\xfc\x3d\x0f\x87\x1f\x9f\xf5\x88\xc6\xa7\xa1\xa0\x5d\x8e\x17\x7e\xe5\xda\xae\x3f\x44\xc9\xd7\x3d\xc8\x30\x37\x92\xbf\x93\xbd\xa5\x3e\x83\xd9\x13\xa6\x27\x85\x9a\x22\xd3\xd5\x8b\x9f\xdc\x93\x94\x1b\x0d\x45\x4f\xce\x79\x58\xe2\x47\x75\xdc\xb5\x0b\xb4\xf8\x17\x51\x30\xab\xc0\x17\x6f\x0a\x8b\x36\x71\xc3\x52\x04\x2d\x2c\x06\x42\x66\xf2\x6d\xdd\x40\x26\x39\xe5\xe6\xdd\x81\x64\x50\x06\xe9\xb9\x3a\xaa\x26\x6a\x12\xd1\x07\xe3\xb0\xde\x50\xcf\xc1\x13\x41\x0b\x6b\x09\xf6\x06\xff\x3b\x9d\xad\xb9\x1e\xf3\x48\x93\x16\x72\xa1\x1c\xcf\x3e\x7e\x8c\xbb\xf6\x05\x92\x81\xc0\x38\x55\x02\x71\xc0\xb7\xe6\xc2\x0f\x86\x49\x44\x1e\xc6\x75\x89\xa3\x9b\x62\x8e\x2c\x6f\xc6\x63\x8a\xb8\x80\x99\x44\x74\xc6\xf6\x6e\x7d\x43\xdd\x0f\xee\x1a\x79\x1e\xf5\x08\x83\x6a\xa9\x3d\xa4\x99\x28\xc8\x77\xc9\x31\x91\xbb\xfe\x0b\x12\xf5\x15\x87\x33\x60\x0e\x91\x47\x49\xe0\xab\x1d\x6f\xa8\xbb\x61\x8f\xcc\xa0\x1f\xd3\x66\x06\x16\xba\xe4\x18\xf0\xf3\xd8\x49\x44\x7b\x28\x5a\x6d\x6c\xc2\x33\xcf\x23\x0d\x59\x32\xf7\x63\x3c\xd6\x92\x86\xad\x62\xb9\x4b\xa4\x60\x8d\xa9\x5c\x10\xf5\x86\x1a\x00\xf1\x4c\xf9\xf7\x12\x70\x67\x62\x78\x53\xfe\x71\x87\x24\xa2\x35\xe6\xf6\xef\x3f\xf8\x44\xa3\x75\x0a\x91\x5f\x0f\x09\x1c\xc2\x83\xfd\x85\xbc\xe5\xbe\x7b\xf5\x78\xcb\x85\x96\x07\x6b\x54\x38\x19\x6e\x36\xdb\x68\x14\xc4\x0c\xc7\x18\x2f\x82\x8c\xc0\x61\x07\x74\x20\xf2\x17\xac\x75\x19\xb0\x11\xa4\x88\x19\x44\xba\x5f\xa3\xad\xf6\xf0\x11\x09\xd0\x6f\xbb\x38\x3f\x89\x84\x0b\x0a\xa3\xf3\x4e\x12\x30\xd1\x68\x30\x18\xc6\x4d\x66\xb9\x14\x38\x98\x41\x91\xf0\x0a\xe8\xc0\x7c\x88\xa5\x99\x19\x30\x2c\x1b\x88\x66\x50\xbc\xd9\x9d\xdf\x81\xc8\x5d\xef\xec\x9b\x87\x0b\x44\x3d\x42\x12\xf2\xeb\xd0\x52\x49\xc4\x38\x78\xa9\x36\x56\xfb\xce\x83\xf6\xb1\x91\xbb\x24\x2e\xa6\x59\xc0\x39\x96\x06\xd8\xab\x9a\x58\x0b\xb4\xfe\x56\x75\x66\x4f\xb6\x0e\x9c\x29\xd8\xbb\x7e\x1e\x1c\x3f\xf9\xf0\x11\x01\x2c\x87\x90\x12\xc8\x02\xcc\x78\xeb\x89\x67\xc9\xf8\xfa\x6b\x78\x76\x0b\x51\x6a\xc2\xe6\x71\x75\x58\x58\x70\x1d\xbe\x9e\x24\xc0\x04\x05\xfb\x73\xd2\x60\x74\x5a\xb6\x2e\x5b\x97\x3f\x17\x52\xa5\x67\x81\xed\xbf\xf9\xab\xc8\xd1\x1b\x23\xb3\xd6\x6f\x4b\x46\xeb\x8d\x4b\xac\xa2\x5a\x89\xaa\xcb\xb4\x6f\x7e\x32\xe4\x61\x1d\x85\x43\x01\x1a\x16\xd8\x74\x58\x62\x69\x08\x5d\x41\xa4\x1a\xaf\x3b\x78\x59\x8a\x12\x39\x55\x83\xf1\x1e\xa4\x7c\xba\x21\xeb\xc3\xff\xfa\x8b\x70\x77\x35\x0e\x62\x78\xd4\x8a\x1f\x2b\xd5\x69\x92\xaa\x50\xa2\x27\xeb\xa1\x0d\x6a\xc5\x4f\x62\x92\x03\x2d\xd8\x08\x7d\xb1\x28\xff\x72\x78\xa0\x08\xc7\x5e\xf1\x0a\x79\xb8\x80\x5a\x63\xea\x82\xaa\x54\x82\x82\x24\xf3\x1a\x43\x9a\xdc\x49\x01\x58\xbf\x75\xef\x94\x7d\xff\xec\x0f\xba\xfc\xf1\xe2\x59\xb7\x9f\x29\xa8\xb5\xfc\x73\xef\x6c\x73\x91\xaf\x08\xc7\x0e\xed\x9d\x1a\x7c\x6b\xc9\x46\x3a\x97\x26\x68\x49\x7d\x44\x6f\xb8\xe4\x6f\xa2\xef\x12\xb1\x95\x28\x80\xf4\xd6\x2f\xd5\x23\x99\xf4\x02\x3d\xb1\xcf\xd3\xa1\xfe\x08\xef\x06\x1b\x93\x31\x9f\xa5\xcd\xf8\x40\xeb\xb5\xae\xc8\x86\x7b\x5d\xef\xeb\xa6\x9e\xa7\xb4\x56\xc7\xd6\x1c\x2f\xdc\xd1\x9b\xe1\x9c\x38\xa7\x16\xbb\xb3\x0e\xe0\x36\x28\x29\xf3\xd3\xda\xbb\xf7\xb8\x8e\xdf\xdc\xd0\xf7\x75\x68\xfa\x74\xe5\xa5\x06\xaf\xa0\x8c\x41\x97\xdc\x6b\x10\xaf\xfa\x78\xbb\xa8\x6e\x3c\x25\x47\x48\x96\x4d\xdc\x48\x5a\x98\x9b\xb3\xf5\x0c\x82\xf8\x8a\xa4\x85\x27\xa1\xcf\x72\x84\x64\x55\x13\xc7\x67\xa1\x00\x37\xcc\x73\xb4\x6d\x9e\xf1\xb0\x63\xfd\x1f\x8e\x1d\xfa\xe8\x41\xb5\xd9\xbe\xf0\xed\x6f\xae\x7b\x81\xea\xbb\xb2\xf4\x57\x09\xbd\x7b\x2c\x3c\xbf\xc1\x94\xb5\xaf\x4f\xcf\x7d\x52\xbe\x63\x5b\xd6\xee\x44\xd3\x31\xab\xf7\x9b\xdb\x7b\x32\x4f\xab\xdf\x7f\x54\x50\x66\x84\xfd\xf7\x88\xe9\x48\x4c\xf7\x78\xc9\x9d\x2b\xce\x9a\x8b\x8d\xee\x5f\xbe\x1f\xf8\xe2\xb3\x53\x73\x94\xc5\xd4\x6b\x1a\x71\x3a\xf6\xbf\xf9\x84\x18\x27\xde\xab\xc6\xb5\xb2\xb6\xec\xd0\x09\xae\x2d\x5f\x35\x24\x5f\xaf\x00\xcf\x5a\x81\x38\xfb\xff\x03\x00\x00\xff\xff\xc5\x2b\xd9\x9b\x47\x09\x00\x00")

func iconPngBytes() ([]byte, error) {
	return bindataRead(
		_iconPng,
		"icon.png",
	)
}

func iconPng() (*asset, error) {
	bytes, err := iconPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "icon.png", size: 2375, mode: os.FileMode(420), modTime: time.Unix(1638344530, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"icon.png": iconPng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"icon.png": &bintree{iconPng, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
